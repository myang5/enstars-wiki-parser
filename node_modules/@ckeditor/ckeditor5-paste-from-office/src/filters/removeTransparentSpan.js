/**
 * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */

/**
 * @module paste-from-office/filters/removetransparentspan
 */

import Matcher from '@ckeditor/ckeditor5-engine/src/view/matcher';
//import UpcastWriter from '@ckeditor/ckeditor5-engine/src/view/upcastwriter';

/**
 * Removes unnecessary spans that form when pasting from Google Docs.
 *
 * All text in Google Docs is wrapped in spans with inline styling, even when no styling is applied. Default text has a span like this:
 * 
 *      <span class="kix-wordhtmlgenerator-word-node" style="font-size:14.666666666666666px;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;">...</span>
 *
 * Which results in unstyled text like this in the view:
 * 
 *      <span style="background-color:transparent;color:#000000;">...</span>
 * 
 * Links from Google Docs also have spans around the text inside the <a> tag, like so:
 * 
 *      <a href="..."><span style="background-color:transparent;color:#1155cc;">...</span></a> 
 *
 */

export function removeTransparentSpan ( documentFragment, writer ) {

	if ( !documentFragment.childCount ) {
		return;
	}

	console.log('remove transparent span');

    for ( const item of writer.createRangeIn( documentFragment ).getItems() ) {
		console.log(item);
		//unwrapDefaultText( item, writer );
	}
}


/**
 * Removes span wrapping around texts that have default formatting (black text, no background).
 *
 * @param {module:engine/view/element~Element} element
 * @param {module:engine/view/upcastwriter~UpcastWriter} writer
 */
function unwrapDefaultText(element, writer) {
	// Matcher for finding `span` elements that have default GDocs formatting.
	const spanMatcher = new Matcher({
		name: 'span',
		styles: {
			'background-color': 'transparent',
			'color': '#000000'
		}
	});

	if (spanMatcher.match(element)) {
		writer.unwrapElement(element);
	}

}

/**
 * Removes span wrapping around links that have default formatting (default blue text, no background).
 *
 * @param {module:engine/view/element~Element} element
 * @param {module:engine/view/upcastwriter~UpcastWriter} writer
 */
function unwrapDefaultLinkText( element, writer ) {
	// Matcher for finding `span` elements that have default GDocs formatting.
	const spanMatcher = new Matcher( {
		name: 'span',
		styles: {
			'background-color': 'transparent',
			'color': '#1155cc'
		}
	} );

	for ( const value of writer.createRangeIn( element ) ) {
		if ( spanMatcher.match( value.item ) ) {
			writer.unwrapElement( value.item );
		}
	}
}

// Finds all list-like elements in a given document fragment.
//
// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment
// in which to look for list-like nodes.
// @param {module:engine/view/upcastwriter~UpcastWriter} writer
// @returns {Array.<Object>} Array of found list-like items. Each item is an object containing:
//
//		* {module:engine/src/view/element~Element} element List-like element.
//		* {Number} id List item id parsed from `mso-list` style (see `getListItemData()` function).
//		* {Number} order List item creation order parsed from `mso-list` style (see `getListItemData()` function).
//		* {Number} indent List item indentation level parsed from `mso-list` style (see `getListItemData()` function).
function findAllItemLikeElements( element, writer ) {
	const range = writer.createRangeIn( documentFragment );

	// Matcher for finding list-like elements.
	const itemLikeElementsMatcher = new Matcher( {
		name: /^p|h\d+$/,
		styles: {
			'mso-list': /.*/
		}
	} );

	const itemLikeElements = [];

	for ( const value of range ) {
		if ( value.type === 'elementStart' && itemLikeElementsMatcher.match( value.item ) ) {
			const itemData = getListItemData( value.item );

			itemLikeElements.push( {
				element: value.item,
				id: itemData.id,
				order: itemData.order,
				indent: itemData.indent
			} );
		}
	}

	return itemLikeElements;
}
